import processing.serial.*;
import controlP5.*;

Serial myPort;
ControlP5 cp5;

int menuHeight = 60;
String[] portList;
boolean portConnected = false;

// 16-channel analog buffer
int[][] data = new int[16][200];

// Logic thresholds
float thresholdLow = 200;
float thresholdHigh = 410;

void settings() {
  size(800, 500);
}

void setup() {
  cp5 = new ControlP5(this);

  // List COM ports
  portList = Serial.list();
  println("Available ports:");
  for (int i = 0; i < portList.length; i++) {
    println("[" + i + "] " + portList[i]);
  }

  // COM Port Selector
  DropdownList portSelector = cp5.addDropdownList("SelectPort")
    .setPosition(10, 10)
    .setSize(150, 150)
    .setItemHeight(20)
    .setBarHeight(20)
    .setLabel("COM Port");

  for (int i = 0; i < portList.length; i++) {
    portSelector.addItem(portList[i], i);
  }

  // Threshold sliders
  cp5.addSlider("thresholdLow")
     .setPosition(170, 10)
     .setSize(120, 15)
     .setRange(0, 1023)
     .setValue(thresholdLow)
     .setLabel("LOW Threshold");

  cp5.addSlider("thresholdHigh")
     .setPosition(300, 10)
     .setSize(120, 15)
     .setRange(0, 1023)
     .setValue(thresholdHigh)
     .setLabel("HIGH Threshold");

  textAlign(LEFT, CENTER);
}

void draw() {
  background(0);
  drawHeader();
  drawScope();
}

void drawHeader() {
  fill(20);
  noStroke();
  rect(0, 0, width, menuHeight);

  fill(255);
  textSize(14);
  text("Bus Whisperer 16ch Scope | Select COM & Adjust Thresholds", 220, 20);
}

void drawScope() {
  strokeWeight(1);
  for (int ch = 0; ch < 16; ch++) {
    float yOffset = menuHeight + ch * ((height - menuHeight) / 16.0);
    for (int x = 0; x < data[ch].length - 1; x++) {
      int val = data[ch][x];
      float y1 = map(val, 0, 1023, yOffset + ((height - menuHeight) / 16.0), yOffset);
      float y2 = map(data[ch][x + 1], 0, 1023, yOffset + ((height - menuHeight) / 16.0), yOffset);
      float x1 = x * (width / float(data[ch].length));
      float x2 = (x + 1) * (width / float(data[ch].length));

      if (val < thresholdLow) stroke(0, 255, 0);        // LOW
      else if (val > thresholdHigh) stroke(255, 0, 0);  // HIGH
      else stroke(255, 165, 0);                         // MIDDLE

      line(x1, y1, x2, y2);
    }
  }
}





void serialEvent(Serial p) {
  String inString = p.readStringUntil('\n');
  if (inString == null) return;

  String[] tokens = trim(inString).split(",");
  if (tokens.length != 16) return;

  for (int i = 0; i < 16; i++) {
    int val = int(tokens[i]);
    // shift left, append new value
    arrayCopy(data[i], 1, data[i], 0, data[i].length - 1);
    data[i][data[i].length - 1] = val;
  }
}
